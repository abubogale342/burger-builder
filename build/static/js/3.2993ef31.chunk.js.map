{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/Checkout.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["CheckoutSummary","props","className","classes","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","React","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actionTypes","WithErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchaseRedirect","purchased","path","match","component","inputElement","inputClasses","InputElement","Invalid","join","autoComplete","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.2993ef31.chunk.js","sourcesContent":["import React from 'react';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.module.css';\n\nconst CheckoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{ width: '100%', margin: 'auto' }}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <Button btnType=\"Danger\" clicked={props.checkoutCancelled}> CANCEL </Button>\n            <Button btnType=\"Success\" clicked={props.checkoutContinued}> CONTINUE </Button>\n        </div>\n    );\n};\n\nexport default CheckoutSummary;\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport Button from '../../../components/UI/Button/Button';\nimport classes from '../ContactData/ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport WithErrorHandler from '../../../hoc/WithErrorHandler/WithErroHandler';\nimport { checkValidity } from '../../../shared/utility';\nimport * as actionTypes from '../../../store/action';\n\nclass ContactData extends React.Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                    isNumeric: true\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { value: 'fastest', displayValue: 'Fastest' },\n                        { value: 'cheapest', displayValue: 'Cheapest' }\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            }\n        },\n        formIsValid: false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n        this.props.onOrderBurger(order, this.props.token);\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        );\n        if (this.props.loading) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    ingredients: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onOrderBurger: (orderData, token) => dispatch(actionTypes.purchaseBurger(orderData, token))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WithErrorHandler(ContactData, axios));\n","import React from 'react';\nimport { Route, Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport classes from './Checkout.module.css';\nimport ContactData from './ContactData/ContactData';\n\nclass Checkout extends React.Component {\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    };\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    };\n\n    render() {\n        let summary = <Redirect to='/' />\n        if (this.props.ingredients) {\n            const purchaseRedirect = this.props.purchased ? <Redirect to='/' /> : null;\n            summary = (\n                <div className={classes.Checkout}>\n                    {purchaseRedirect}\n                    <CheckoutSummary\n                        ingredients={this.props.ingredients}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler}\n                    />\n                    <Route\n                        path={this.props.match.path + '/contact-data'}\n                        component={ContactData}\n                    />\n                </div>\n            )\n        }\n        return summary;\n    }\n}\n\nconst mapStateToProps = state => ({\n    ingredients: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased\n});\n\nexport default connect(mapStateToProps)(Checkout);\n","import React from 'react';\nimport classes from './Input.module.css';\n\nconst Input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                autoComplete=\"on\"\n                onChange={props.changed} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n};\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Checkout\":\"Checkout_Checkout__1OoAc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\",\"Input\":\"ContactData_Input__2fK5-\"};"],"sourceRoot":""}