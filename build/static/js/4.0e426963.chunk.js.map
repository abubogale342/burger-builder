{"version":3,"sources":["containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css"],"names":["Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updateControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","building","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","autoRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","dispatch","actions","Input","inputElement","inputClasses","InputElement","Invalid","join","autoComplete","onChange","options","option","displayValue","Label","label","module","exports"],"mappings":"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","file":"static/js/4.0e426963.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport { Redirect } from 'react-router-dom';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/action';\nimport { connect } from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        isSignUp: true,\n    }\n\n    componentDidMount() {\n        if (!this.props.building && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath('/');\n        }\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updateControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        }\n        this.setState({ controls: updateControls })\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => (\n            { isSignUp: !prevState.isSignUp }\n        ));\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n\n        let form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\n            />\n        ));\n\n        if (this.props.loading && (this.state.controls.email.valid && this.state.controls.password.valid)) {\n            form = <Spinner />;\n        }\n\n        let errorMessage = null;\n        if (this.props.error) {\n            errorMessage = <p>{this.props.error.message}</p>;\n        }\n\n        let autoRedirect = null;\n        if (this.props.isAuthenticated) {\n            autoRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {autoRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">Submit</Button>\n                </form>\n                <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    building: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n","import React from 'react';\nimport classes from './Input.module.css';\n\nconst Input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                autoComplete=\"on\"\n                onChange={props.changed} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n};\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};"],"sourceRoot":""}